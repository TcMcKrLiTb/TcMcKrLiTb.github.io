[{"content":"近日整了一台CentOS虚拟机这里记录配置方法\nLinux版本：CentOS7\n软件：VMware Workstation Pro\n配置网络 首先将虚拟机配置为桥接模式\n首先ping一下127.0.0.1看看网卡是否是好的\n这个时候ping百度看看通不通，如果通了直接换源，如果没通继续：\n首先查看当前网络连接\nnmcli connection show 记住网络设备：\n设置DNS服务器\nnmcli con mod ens33 ipv4.dns \u0026#34;114.114.114.114 8.8.8.8\u0026#34; nmcli con up ens33 此时再ping即可ping通\n更换yum源 首先备份原来的CentOS官方yum源\ncp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak 获取阿里的yum源覆盖本地官方yum源\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 清理yum缓存，并生成新的缓存\nyum clean all yum makecache 此时测试下载：\nyum install -y wget yum install -y vim 没报错，成功！\n","permalink":"https://www.tcmckrlitb.top/posts/%E5%B4%AD%E6%96%B0centos7%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8D%A2%E6%BA%90/","summary":"近日整了一台CentOS虚拟机这里记录配置方法\nLinux版本：CentOS7\n软件：VMware Workstation Pro\n配置网络 首先将虚拟机配置为桥接模式\n首先ping一下127.0.0.1看看网卡是否是好的\n这个时候ping百度看看通不通，如果通了直接换源，如果没通继续：\n首先查看当前网络连接\nnmcli connection show 记住网络设备：\n设置DNS服务器\nnmcli con mod ens33 ipv4.dns \u0026#34;114.114.114.114 8.8.8.8\u0026#34; nmcli con up ens33 此时再ping即可ping通\n更换yum源 首先备份原来的CentOS官方yum源\ncp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak 获取阿里的yum源覆盖本地官方yum源\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 清理yum缓存，并生成新的缓存\nyum clean all yum makecache 此时测试下载：\nyum install -y wget yum install -y vim 没报错，成功！","title":"崭新CentOS7虚拟机换源"},{"content":"在配置了Github Pages之后，发现网站中所有图片都没有了，检查之后发现没有成功加载图片，\n但是查看Github仓库之后发现路径并没有问题，但是图片就是显示404\n即便是在仓库中显示这个文件是存在的，这里出现的问题就是文件命名规范的问题\n如果使用Github为图床时，文件的路径中文件夹名称首不能出现字符 \u0026quot;_\u0026quot;（下划线），不然会出现文件访问不了的情况，这时只需要将文件夹名称中下划线删除，然后批量修改HTML页面即可\n此时再访问网站页面即可发现问题已经解决~\n","permalink":"https://www.tcmckrlitb.top/posts/%E5%85%B3%E4%BA%8Egithub%E4%B8%AD%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87/","summary":"在配置了Github Pages之后，发现网站中所有图片都没有了，检查之后发现没有成功加载图片，\n但是查看Github仓库之后发现路径并没有问题，但是图片就是显示404\n即便是在仓库中显示这个文件是存在的，这里出现的问题就是文件命名规范的问题\n如果使用Github为图床时，文件的路径中文件夹名称首不能出现字符 \u0026quot;_\u0026quot;（下划线），不然会出现文件访问不了的情况，这时只需要将文件夹名称中下划线删除，然后批量修改HTML页面即可\n此时再访问网站页面即可发现问题已经解决~","title":"关于Github中无法加载图片"},{"content":"问题背景： 先来看一个案例：\n#include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; int main(void){ double a; int b; a = 64.35;a*= 100; b = a; b %= 10; cout \u0026lt;\u0026lt; b; return 0; } 很显然，通过常理推断，这里的答案应该输出5，但是他却输出了4\n我首先猜测是强制转换的问题，将第八行改成了b = (int)a测试运行之后竟然还是不对\n解决： float和double类型的主要设计目的是为了科学计算和工程计算。它们执行二进制浮点运算，这是为了在广域数值范围上提供较为精确的快速近似计算而精心设计的。\n然而，它们没有提供完全精确的结果，所以不应该被用于要求精确结果的场合。\nfloat和double类型对于货币计算尤为不合适，因为要让一个float或者double精确地表示0.1(或者10的任何负数次方值)是不可能的，这种舍入错误产生的原因是浮点数实际上是用二进制系统实现的，而分数在二进制系统中没有精确的表示，其道理就如同在十进制系统中无法精确表示1/3一样；再比如0.5在二进制系统中有精确表示，而0.55在二进制系统中没有精确表示。\n如上的情况，为了避免这个问题，另加上小数，如\nb = a + 0.01\n就可以使结果正确了。\n原因分析： 首先，我们举出一个更方便理解的例子：我们如果去写一个代码来表示分数之间的加法，例如： $$ \\frac 1 2 + \\frac 1 3 = \\frac 5 6 $$ 但是如果我们如下写代码：\nint main(void){ double a, b, c, d; a = 1;a /= 3; b = 1;b /= 2; d = 5;d /= 6; c = a + b; puts(c == d ? \u0026#34;true\u0026#34; : \u0026#34;false\u0026#34;); } 就会神奇的发现程序运行结果是false。这是为什么呢？这就需要考虑小数失真，为什么会失真？\n首先我们看，代码运行完毕后，a的值应该是三分之一，但我们人类在进行表示的时候，只能表示出有限的位数，如零点三三循环，我们只能舍去精度后面的位数，这时，这个数字就会失真。\n再想，计算机存储数据采用二进制，目前的浮点数采用符号位-指数-尾数的方法进行存储。在十进制中，我们如下表示一个小数： $$ a.bc = a\\times10^0+b\\times10^{-1}+c\\times10^{-2} $$ 那么，如果是由01构成的二进制呢？我们大概只能这样： $$ a.b = m\\times2^0+n\\times2^{-1} $$ 这个时候就不难理解，我们表示0.5的时候，只需要像十进制一样保存二的负一次方就行了。但是如果想要表示0.1，就如同十进制中想要保存0.3一样，所以，当我们使用小数的时候，通常不去使用\u0026quot; == \u0026quot;（判等），而是去使用一个范围例如：(bool)(abs(a - b) \u0026lt;= 1e-7)此时，采用这句话，带入刚才的程序：\n#include \u0026lt;cmath\u0026gt;int main(void){ double a, b, c, d; a = 1;a /= 3; b = 1;b /= 2; d = 5;d /= 6; c = a + b; puts((abs(c - d) \u0026lt;= 1e-7) ? \u0026#34;true\u0026#34; : \u0026#34;false\u0026#34;); } 运行结果就是true啦~\n所以，为了避免以上情况再次发生，除了加上小数之外，我们还可以单独保存小数部分，将小数部分保存为整型，就可以解决很多困扰。\n","permalink":"https://www.tcmckrlitb.top/posts/%E5%85%B3%E4%BA%8Edouble%E8%BD%ACint%E6%97%B6%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/","summary":"问题背景： 先来看一个案例：\n#include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; int main(void){ double a; int b; a = 64.35;a*= 100; b = a; b %= 10; cout \u0026lt;\u0026lt; b; return 0; } 很显然，通过常理推断，这里的答案应该输出5，但是他却输出了4\n我首先猜测是强制转换的问题，将第八行改成了b = (int)a测试运行之后竟然还是不对\n解决： float和double类型的主要设计目的是为了科学计算和工程计算。它们执行二进制浮点运算，这是为了在广域数值范围上提供较为精确的快速近似计算而精心设计的。\n然而，它们没有提供完全精确的结果，所以不应该被用于要求精确结果的场合。\nfloat和double类型对于货币计算尤为不合适，因为要让一个float或者double精确地表示0.1(或者10的任何负数次方值)是不可能的，这种舍入错误产生的原因是浮点数实际上是用二进制系统实现的，而分数在二进制系统中没有精确的表示，其道理就如同在十进制系统中无法精确表示1/3一样；再比如0.5在二进制系统中有精确表示，而0.55在二进制系统中没有精确表示。\n如上的情况，为了避免这个问题，另加上小数，如\nb = a + 0.01\n就可以使结果正确了。\n原因分析： 首先，我们举出一个更方便理解的例子：我们如果去写一个代码来表示分数之间的加法，例如： $$ \\frac 1 2 + \\frac 1 3 = \\frac 5 6 $$ 但是如果我们如下写代码：\nint main(void){ double a, b, c, d; a = 1;a /= 3; b = 1;b /= 2; d = 5;d /= 6; c = a + b; puts(c == d ?","title":"关于double转int时结果不一致问题"},{"content":"引子 由于hugo官方默认的config文件为.toml格式，而我此处使用的皮肤官方页面全部采用.xml编写，根据作者来看他认为这样更简明。。。链接如下：Features · adityatelange/hugo-paper\n短时间内并没有找到自动转换工具，但是找到一个简单的格式模板，在此记录\n内容 原先的.xml配置内容：\nrelated: threshold:80 includeNewer:false toLower:false indices: -name:keywords weight:100 -name:date weight:10 转换之后的.toml配置内容：\n[related] threshold = 80.0 includeNewer = false toLower = false [[related.indices]] name = \u0026#34;ketwords\u0026#34; weight = 100.0 [[related.indices]] name = \u0026#34;date\u0026#34; weight = 10.0 更多的的：\nparams: profileMode: enabled: true title: \u0026#34;\u0026lt;Title\u0026gt;\u0026#34; # optional default will be site title subtitle: \u0026#34;This is subtitle\u0026#34; imageUrl: \u0026#34;\u0026lt;image link\u0026gt;\u0026#34; # optional imageTitle: \u0026#34;\u0026lt;title of image as alt\u0026gt;\u0026#34; # optional imageWidth: 120 # custom size imageHeight: 120 # custom size buttons: - name: Archive url: \u0026#34;/archive\u0026#34; - name: Github url: \u0026#34;https://github.com/\u0026#34; socialIcons: # optional - name: \u0026#34;\u0026lt;platform\u0026gt;\u0026#34; url: \u0026#34;\u0026lt;link\u0026gt;\u0026#34; - name: \u0026#34;\u0026lt;platform 2\u0026gt;\u0026#34; url: \u0026#34;\u0026lt;link2\u0026gt;\u0026#34; 应变更为：\n[params] [params.profileMode] enabled = \u0026#34;true\u0026#34; title = \u0026#34;\u0026lt;title\u0026gt;\u0026#34; # optional default will be site title subtitle = \u0026#34;This is subtitle\u0026#34; imageUrl = \u0026#34;\u0026lt;image link\u0026gt;\u0026#34; # optional imageTitle = \u0026#34;\u0026lt;title of image as alt\u0026gt;\u0026#34; # optional imageWidth = 120 # custom size imageHeight = 120 # custom size [[params.profileMode.buttons]] name = \u0026#34;Archive\u0026#34; url = \u0026#34;/Archive\u0026#34; [[params.profileMode.buttons]] name = \u0026#34;Github\u0026#34; url = \u0026#34;https://github.com\u0026#34; [[params.socialIcons]] name = \u0026#34;\u0026lt;platform\u0026gt;\u0026#34; url = \u0026#34;\u0026lt;link\u0026gt;\u0026#34; [[params.socialIcons]] name = \u0026#34;\u0026lt;platform 2\u0026gt;\u0026#34; url = \u0026#34;\u0026lt;link2\u0026gt;\u0026#34; ","permalink":"https://www.tcmckrlitb.top/posts/%E5%A6%82%E4%BD%95%E5%B0%86.xml%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E6%88%90.toml/","summary":"引子 由于hugo官方默认的config文件为.toml格式，而我此处使用的皮肤官方页面全部采用.xml编写，根据作者来看他认为这样更简明。。。链接如下：Features · adityatelange/hugo-paper\n短时间内并没有找到自动转换工具，但是找到一个简单的格式模板，在此记录\n内容 原先的.xml配置内容：\nrelated: threshold:80 includeNewer:false toLower:false indices: -name:keywords weight:100 -name:date weight:10 转换之后的.toml配置内容：\n[related] threshold = 80.0 includeNewer = false toLower = false [[related.indices]] name = \u0026#34;ketwords\u0026#34; weight = 100.0 [[related.indices]] name = \u0026#34;date\u0026#34; weight = 10.0 更多的的：\nparams: profileMode: enabled: true title: \u0026#34;\u0026lt;Title\u0026gt;\u0026#34; # optional default will be site title subtitle: \u0026#34;This is subtitle\u0026#34; imageUrl: \u0026#34;\u0026lt;image link\u0026gt;\u0026#34; # optional imageTitle: \u0026#34;\u0026lt;title of image as alt\u0026gt;\u0026#34; # optional imageWidth: 120 # custom size imageHeight: 120 # custom size buttons: - name: Archive url: \u0026#34;/archive\u0026#34; - name: Github url: \u0026#34;https://github.","title":"如何将.xml文件转换成.toml"},{"content":" 部署步骤   首先，清空远程库（也可以不清空，但一定要备份！接下来的操作将会覆盖掉你的远程库）\n  在命令提示符下进入site的位置，输入命令hugo生成\\public目录\n  进入public右键git bash here\n  输入命令：git init出现如图所示小标算成功\n  接着，将文档放入缓存区：git add -A或git add .\n  然后将所有文件提交至本地仓库：git commit -am\u0026quot;随便写点什么\u0026quot;\n  远程创建新分支：git remote add origin 你的仓库的url\n  将文件推送至远程库git push -f origin master\n  合并分支：git push --set-upstream origin master\n  在github上Setting中的Page界面更改域名\n  ","permalink":"https://www.tcmckrlitb.top/posts/%E9%83%A8%E7%BD%B2github%E7%BD%91%E9%A1%B5%E7%AB%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/","summary":" 部署步骤   首先，清空远程库（也可以不清空，但一定要备份！接下来的操作将会覆盖掉你的远程库）\n  在命令提示符下进入site的位置，输入命令hugo生成\\public目录\n  进入public右键git bash here\n  输入命令：git init出现如图所示小标算成功\n  接着，将文档放入缓存区：git add -A或git add .\n  然后将所有文件提交至本地仓库：git commit -am\u0026quot;随便写点什么\u0026quot;\n  远程创建新分支：git remote add origin 你的仓库的url\n  将文件推送至远程库git push -f origin master\n  合并分支：git push --set-upstream origin master\n  在github上Setting中的Page界面更改域名\n  ","title":"部署Github网页端的小步骤"},{"content":"My about content,\n","permalink":"https://www.tcmckrlitb.top/about/","summary":"My about content,","title":"About"}]